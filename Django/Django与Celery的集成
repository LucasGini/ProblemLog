Django与Celery的集成

一、Celery的使用

1.什么是Celery？
    .一个分布式的任务队列
        .简单：几行代码可以创建一个简单的Celery任务
        .高可用：工作机会自动重试
        .快速：可以执行一分钟上百万任务
        .灵活：每一块都可以扩展
        
    示例：
    from celery import Celery
    
    app Celery('hello', broker='amqp://guest@localhost//')
    
    @app.task
    def hello()
        return 'hello world'
        
2.Celery使用场景
    .大量需要使用异步任务的场景
        .发送电子邮件，发送IM消息通知
        .爬取网页，数据分析
        .图像、视频处理
        .生成报告，深度学习
        
3.搭建Celery环境

(1)下载Celery包
    pip install -U Celery

(2)安装依赖包
    pip install "celery[redis,auth,msgpack]"
    
4.启动Redis服务
    Redis-server.exe redis.windows.conf

5.在项目的根目录下创建一个celery文件

6.添加一个tasks.py文件
    代码：
    from celery import Celery

    # 第一个参数 是当前脚本的名称， 第二个参数是broker服务地址
    app = Celery('tasks', backend='redis://127.0.0.1', broker='redis://127.0.0.1')
    
    
    @app.task
    def add(x, y):
        return x + y
        
7.celery目录下启动命令
    celery -A tasks worker --loglevel=info
    
8.celery文件下添加一个run_task.py
    from tasks import add
    
    result = add.delay(4, 4)
    print('Is task ready: %s' % result.ready())
    
    run_result = result.get(timeout=1)
    print('task result: %s' % run_result)

9.celery目录下运行run_task.py

二、使用flower监控任务执行情况

1.安装flower
    pip install flower

2.启动服务
    celery -A tasks flower --broker=redis://@localhost:6379/0

windows系统遇到的问题
(1)执行任务队列报错
Traceback (most recent call last):
  File "c:\users\circle\appdata\local\programs\python\python37-32\lib\site-packages\billiard\pool.py", line 358, in workloop
    result = (True, prepare_result(fun(*args, **kwargs)))
  File "c:\users\circle\appdata\local\programs\python\python37-32\lib\site-packages\celery\app\trace.py", line 546, in _fast_trace_task
    tasks, accept, hostname = _loc
ValueError: not enough values to unpack (expected 3, got 0)

解决方法：
    安装eventlet：pip install eventlet
    再次启动celery执行任务：celery -A celery_tasks.tasks worker -l info -P eventlet 


